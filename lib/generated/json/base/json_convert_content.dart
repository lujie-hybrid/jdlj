// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:jdlj/model/list_entity.dart';
import 'package:jdlj/generated/json/list_entity_helper.dart';
import 'package:jdlj/model/order_entity.dart';
import 'package:jdlj/generated/json/order_entity_helper.dart';
import 'package:jdlj/model/detail_entity.dart';
import 'package:jdlj/generated/json/detail_entity_helper.dart';
import 'package:jdlj/model/slider_entity.dart';
import 'package:jdlj/generated/json/slider_entity_helper.dart';
import 'package:jdlj/model/best_entity.dart';
import 'package:jdlj/generated/json/best_entity_helper.dart';
import 'package:jdlj/model/address_entity.dart';
import 'package:jdlj/generated/json/address_entity_helper.dart';
import 'package:jdlj/model/hot_entity.dart';
import 'package:jdlj/generated/json/hot_entity_helper.dart';
import 'package:jdlj/model/cate_entity.dart';
import 'package:jdlj/generated/json/cate_entity_helper.dart';

class JsonConvert<T> {
	T fromJson(Map<String, dynamic> json) {
		return _getFromJson<T>(runtimeType, this, json);
	}

  Map<String, dynamic> toJson() {
		return _getToJson<T>(runtimeType, this);
  }

  static _getFromJson<T>(Type type, data, json) {
    switch (type) {			case ListEntity:
			return listEntityFromJson(data as ListEntity, json) as T;			case ListResult:
			return listResultFromJson(data as ListResult, json) as T;			case OrderEntity:
			return orderEntityFromJson(data as OrderEntity, json) as T;			case OrderResult:
			return orderResultFromJson(data as OrderResult, json) as T;			case OrderResultOrderItem:
			return orderResultOrderItemFromJson(data as OrderResultOrderItem, json) as T;			case DetailEntity:
			return detailEntityFromJson(data as DetailEntity, json) as T;			case DetailResult:
			return detailResultFromJson(data as DetailResult, json) as T;			case DetailResultAttr:
			return detailResultAttrFromJson(data as DetailResultAttr, json) as T;			case SliderEntity:
			return sliderEntityFromJson(data as SliderEntity, json) as T;			case SliderResult:
			return sliderResultFromJson(data as SliderResult, json) as T;			case BestEntity:
			return bestEntityFromJson(data as BestEntity, json) as T;			case BestResult:
			return bestResultFromJson(data as BestResult, json) as T;			case AddressEntity:
			return addressEntityFromJson(data as AddressEntity, json) as T;			case AddressResult:
			return addressResultFromJson(data as AddressResult, json) as T;			case HotEntity:
			return hotEntityFromJson(data as HotEntity, json) as T;			case HotResult:
			return hotResultFromJson(data as HotResult, json) as T;			case CateEntity:
			return cateEntityFromJson(data as CateEntity, json) as T;			case CateResult:
			return cateResultFromJson(data as CateResult, json) as T;    }
    return data as T;
  }

  static _getToJson<T>(Type type, data) {
		switch (type) {			case ListEntity:
			return listEntityToJson(data as ListEntity);			case ListResult:
			return listResultToJson(data as ListResult);			case OrderEntity:
			return orderEntityToJson(data as OrderEntity);			case OrderResult:
			return orderResultToJson(data as OrderResult);			case OrderResultOrderItem:
			return orderResultOrderItemToJson(data as OrderResultOrderItem);			case DetailEntity:
			return detailEntityToJson(data as DetailEntity);			case DetailResult:
			return detailResultToJson(data as DetailResult);			case DetailResultAttr:
			return detailResultAttrToJson(data as DetailResultAttr);			case SliderEntity:
			return sliderEntityToJson(data as SliderEntity);			case SliderResult:
			return sliderResultToJson(data as SliderResult);			case BestEntity:
			return bestEntityToJson(data as BestEntity);			case BestResult:
			return bestResultToJson(data as BestResult);			case AddressEntity:
			return addressEntityToJson(data as AddressEntity);			case AddressResult:
			return addressResultToJson(data as AddressResult);			case HotEntity:
			return hotEntityToJson(data as HotEntity);			case HotResult:
			return hotResultToJson(data as HotResult);			case CateEntity:
			return cateEntityToJson(data as CateEntity);			case CateResult:
			return cateResultToJson(data as CateResult);    }
    return data as T;
  }
  //Go back to a single instance by type
  static _fromJsonSingle(String type, json) {
    switch (type) {			case 'ListEntity':
			return ListEntity().fromJson(json);			case 'ListResult':
			return ListResult().fromJson(json);			case 'OrderEntity':
			return OrderEntity().fromJson(json);			case 'OrderResult':
			return OrderResult().fromJson(json);			case 'OrderResultOrderItem':
			return OrderResultOrderItem().fromJson(json);			case 'DetailEntity':
			return DetailEntity().fromJson(json);			case 'DetailResult':
			return DetailResult().fromJson(json);			case 'DetailResultAttr':
			return DetailResultAttr().fromJson(json);			case 'SliderEntity':
			return SliderEntity().fromJson(json);			case 'SliderResult':
			return SliderResult().fromJson(json);			case 'BestEntity':
			return BestEntity().fromJson(json);			case 'BestResult':
			return BestResult().fromJson(json);			case 'AddressEntity':
			return AddressEntity().fromJson(json);			case 'AddressResult':
			return AddressResult().fromJson(json);			case 'HotEntity':
			return HotEntity().fromJson(json);			case 'HotResult':
			return HotResult().fromJson(json);			case 'CateEntity':
			return CateEntity().fromJson(json);			case 'CateResult':
			return CateResult().fromJson(json);    }
    return null;
  }

  //empty list is returned by type
  static _getListFromType(String type) {
    switch (type) {			case 'ListEntity':
			return List<ListEntity>();			case 'ListResult':
			return List<ListResult>();			case 'OrderEntity':
			return List<OrderEntity>();			case 'OrderResult':
			return List<OrderResult>();			case 'OrderResultOrderItem':
			return List<OrderResultOrderItem>();			case 'DetailEntity':
			return List<DetailEntity>();			case 'DetailResult':
			return List<DetailResult>();			case 'DetailResultAttr':
			return List<DetailResultAttr>();			case 'SliderEntity':
			return List<SliderEntity>();			case 'SliderResult':
			return List<SliderResult>();			case 'BestEntity':
			return List<BestEntity>();			case 'BestResult':
			return List<BestResult>();			case 'AddressEntity':
			return List<AddressEntity>();			case 'AddressResult':
			return List<AddressResult>();			case 'HotEntity':
			return List<HotEntity>();			case 'HotResult':
			return List<HotResult>();			case 'CateEntity':
			return List<CateEntity>();			case 'CateResult':
			return List<CateResult>();    }
    return null;
  }

  static M fromJsonAsT<M>(json) {
    String type = M.toString();
    if (json is List && type.contains("List<")) {
      String itemType = type.substring(5, type.length - 1);
      List tempList = _getListFromType(itemType);
      json.forEach((itemJson) {
        tempList
            .add(_fromJsonSingle(type.substring(5, type.length - 1), itemJson));
      });
      return tempList as M;
    } else {
      return _fromJsonSingle(M.toString(), json) as M;
    }
  }
}